



2X2S5S1S2R1

4 + 5 + 1 + 1

2 * 2 + 5 + 1 / 1 + 4 / 2
2 * 2 = 4
 1 / 1 = 1

 4 + 5 + 1 + 2




2 * 2 + 5 + 1 + 2 * 1 - 2 + 1 - 1

4 + 5 + 1 + 0 + 0
















exports.index = async (req, res, next) =>{

    res.render("index"); 
}

exports.calcular = async (req, res, next) =>{
console.log(req.query);

let datos = "4-7+8+9/2*3";
let arreglo = Array.from(datos);
// console.log(arreglo)
// console.log(arreglo.length)
//'4-7+8+9/2x3'
// const cadena = '4R7S8S9V2X3';
// let cadena = '2X3S5S6V5X3S2'; //pendiente decimal
let cadena = '2X2S5S1V54X8S1';
//2 * 2 + 5 + 1 / 54 * 8 + 1
// let cadena = '2X3S5S15V5X3S2';
// const cadena = '2X3S5S6V3S2';
// 2 * 3 + 5 + 6 / 5 * 3 + 2
// 2 * 3 = 6
// 5 * 3 = 15
// 6 / 15 = 0.4
// 6 + 5 + 0.4 + 2 = 13.4
let array = Array.from(cadena);
let suma = 0;
let resta = 0;
let divi = 0;
let multi = 0;
array.forEach(element => {
    console.log(element);
    if(element === 'S'){
        suma++;
    }
    if(element === 'R'){
        resta++;
    }
    if(element === 'V'){
        divi++;
    }
    if(element === 'X'){
        multi++;
    }
});
console.log('suma',suma);
console.log('resta',resta);
console.log('divi',divi);
console.log('multi',multi);

// const expresion = /([-]?[0-9]+)X([+-]?[0-9]+)/;
// const match = cadena.match(expresion);
// console.log(match);
// console.log(Number(match[1])*Number(match[2]));
// let mult = Number(match[1])*Number(match[2]);
// let newCadena = cadena.replace(match[0],mult);
// console.log(newCadena);

let expresion = /([-]?[0-9]+)X([-]?[0-9]+)/;
let match = "";
console.log(match);
// console.log(Number(match[1])*Number(match[2]));
// let mult = Number(match[1])*Number(match[2]);
// let newCadena = cadena.replace(match[0],mult);
// console.log(newCadena);



for (let i = 0; i < Number(multi); i++){
    match = cadena.match(expresion);

    let mult = Number(match[1])*Number(match[2]);
    let newCadena = cadena.replace(match[0],mult);
    cadena = newCadena;
}
console.log(cadena);
// const cadena2 = newCadena;
const cadena2 = cadena;
const expresion2 = /([-]?[0-9]+)V([-]?[0-9]+)/;
// const expresion2 = /([-]?[0-9]+([.][0-9]+))V([-]?[0-9]+([.][0-9]+))/;
const match2 = cadena2.match(expresion2);
console.log("div",match2);
console.log(Number(match2[1])/Number(match2[2]));
let div = Number(match2[1])/Number(match2[2]);
let newCadena2 = cadena2.replace(match2[0],div);
console.log('newCadena2',newCadena2);


if(Number(resta)){
const cadena3 = newCadena2;
const expresion3 = /([-]?[0-9]+)R([-]?[0-9]+)/;
const match3 = cadena3.match(expresion3);
console.log("match3",match3);
console.log(Number(match3[1])-Number(match3[2]));
let rest = Number(match3[1])-Number(match3[2]);
let newCadena3 = cadena3.replace(match3[0],rest);
console.log(newCadena3);
}else{
    newCadena3 = newCadena2;
}


let cadena4 = "";
// let expresion4 = /([-]?[0-9]+)S([-]?[0-9]+)/;
let expresion4 = /([-]?[0-9]*\.?[0-9]+)S([-]?[0-9]*\.?[0-9]+)/;
let match4 = "";
// console.log(match4);
// console.log(Number(match4[1])+Number(match4[2]));

// let sum = Number(match4[1])+Number(match4[2]);
// let newCadena4 = cadena4.replace(match4[0],sum);
// console.log(newCadena4);

for (let i = 0; i < Number(suma); i++){
    cadena4 = newCadena3;
    match4 = cadena4.match(expresion4);
     console.log("match4",match4);
    // console.log(Number(match4[1])+Number(match4[2]));
    
    let sum = Number(match4[1])+Number(match4[2]);
    let newCadena4 = cadena4.replace(match4[0],sum);
    newCadena3 = newCadena4;


}
console.log(newCadena3);






const ciclo = (arreglo, operador) =>{
    let resta = "";
let operacion = "";
let mark = true;
let markt = false;
let tResta = "";
    for (let i = 0; i < arreglo.length; i++){
        //console.log(arreglo[i]);
    
        if(Number(arreglo[i]) && mark){
            //console.log(arreglo[i]);
             resta += arreglo[i];
        }
        if(arreglo[i] === operador ){
            if(mark){
                tResta = resta+arreglo[i];
                //console.log(resta+arreglo[i])
                markt = true;
            }
           
    
        }
    
        if(markt){
            if(!mark){
                if(Number(arreglo[i])){
                    tResta += operacion+arreglo[i]
                    //console.log(tResta);
                }else{
                    //console.log('break')
                    markt = false;
                    return tResta;
                    
                    
                }
            }
            mark = false;     
    
       }
    }
}

function validateDecimal(valor) {
    var RE = /^\d*\.?\d*$/;
    if (RE.test(valor)) {
        return true;
    } else {
        return false;
    }
}
console.log("test")
console.log(validateDecimal('5'))

    res.json({
        respuesta: "Exitoso"
    })
}









// const calcular = (cadena) =>{
//     let expresion = /([-]?[0-9]*\.?[0-9]+)X([-]?[0-9]*\.?[0-9]+)/;
//     let match = "";
//     //console.log(match);

//     for (let i = 0; i < Number(multi); i++){
//         match = cadena.match(expresion);

//         let mult = Number(match[1])*Number(match[2]);
//         let newCadena = cadena.replace(match[0],mult);
//         cadena = newCadena;
//     }
//     //console.log(cadena);


//     let cadena2 = "";
//     let expresion2 = /([-]?[0-9]*\.?[0-9]+)V([-]?[0-9]*\.?[0-9]+)/;
//     let match2 = "";

//     for (let i = 0; i < Number(divi); i++){
//         cadena2 = cadena;
//         match2 = cadena2.match(expresion2);
//          console.log("match2",match2);
//         if(Number(match2[2]) === 0){
//             throw("No se puede dividir entre cero");
//         }
//         let div = Number(match2[1])/Number(match2[2]);
//         let newCadena2 = cadena2.replace(match2[0],div);
//         cadena = newCadena2;
//     }


//     let cadena3 = "";
//     let expresion3 = /([-]?[0-9]*\.?[0-9]+)R([-]?[0-9]*\.?[0-9]+)/;
//     let match3 = "";

//     for (let i = 0; i < Number(resta); i++){
//         cadena3 = cadena;
//         match3 = cadena3.match(expresion3);
//          //console.log("match3",match3);

//         let rest = Number(match3[1])-Number(match3[2]);
//         cadena = cadena3.replace(match3[0],rest);
//     }






//     let cadena4 = "";
//     let expresion4 = /([-]?[0-9]*\.?[0-9]+)S([-]?[0-9]*\.?[0-9]+)/;
//     let match4 = "";

//     for (let i = 0; i < Number(suma); i++){
//         cadena4 = cadena;
//         match4 = cadena4.match(expresion4);
//         //console.log("match4",match4);

//         let sum = Number(match4[1])+Number(match4[2]);
//         let newCadena4 = cadena4.replace(match4[0],sum);
//         cadena = newCadena4;


//     }
//    // console.log(cadena);
//     return cadena;

// }